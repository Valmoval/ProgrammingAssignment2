install.packages ("Swirl")
install.packages ("swirl")
library ("swirl")
swirl()
5+7
x <- 5 + 7
cube,_function(x,n){
xˆ3
}
cube<-function(x,n){
xˆ3
}
cube<-function(x,n) {
xˆ3
}
cube
cube<- function (x,n) {}
cube<- function (x,n) {
xˆ3}
prova<- function (x,n) {}
prova<- function (x,n) { x*2}
prova(2)
prova<- function (x,n) { xˆ2}
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(i > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
y <- 0
}
x<- 1:10
x
test<- (x,y)
test<- (x,y) {x<-1:10 }
test<- (x,y) {x<-1:10 if(x>5)}
clear
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y(x)
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
setwd("~/Data Analysis/specdata")
rm(list=ls())
pollutantmean<- function(directory,pollutant, id){
file_names<-list.files(directory, full.names = TRUE)
specdata<- do.call(rbind,lapply(file_names,read.csv, header=TRUE))
specdataID <- data.frame()
for (i in id){
specdataID <- rbind(specdataID,subset(specdata, ID==i))
}
mean(specdataID[, pollutant], na.rm=TRUE)
}
pollutantmean("/Users/Vale/Data Analysis/specdata","sulfate",1:10)
pollutantmean("/Users/Vale/Data Analysis/specdata","nitrate",70:72)
pollutantmean("/Users/Vale/Data Analysis/specdata","sulfate",34)
pollutantmean("/Users/Vale/Data Analysis/specdata","nitrate")
pollutantmean("/Users/Vale/Data Analysis/specdata","nitrate",1:332)
?complete
cc<-complete("/Users/Vale/Data Analysis/specdata", c(6,10,20,34,100,200,310))
cc<- complete("/Users/Vale/Data Analysis/specdata", 54)
completeMany <- function(directory, id) {
file_names<-list.files(directory, full.names = TRUE) #lista nomi files
specdata<- do.call(rbind,lapply(file_names,read.csv, header=TRUE))# lapply leggge tutti i files, rbind li unisce, do.call li appicica
specdata_complete <- subset(specdata,complete.cases(specdata)==TRUE)
nobs<- data.frame() # crea un vettore/matrice vuoto/a
#nobs<- c("id","nobs") # crea un vettore con contenuto (R usa la prima riga come header)
#nobs<- data.frame("id","nobs",row.names=1)
# calcola i valori per ogni id
for (i in id){
specdataID <- subset(specdata_complete, ID==i) # da il subset con l ID scelto per i
lengthID <- nrow(specdataID)
# lengthID <- nrow(complete.cases(specdataID)) #e.g., 24, ma complete.cases non funziona
# lengthID <- nrow(!is.na(specdataID)) #e.g., 24, ma is.na non guarda
currentID <- i # e.g., 1
lengthForID <- c(currentID, lengthID) # e.g., (1,24)
nobs<- rbind(nobs, lengthForID)
}
header <- c("id","nobs")
colnames(nobs) <- header
nobs
}
cc<-completeMany("/Users/Vale/Data Analysis/specdata", c(6,10,20,34,100,200,310))
print(cc$nobs)
cc<- completeMany("/Users/Vale/Data Analysis/specdata", 54)
print(cc$nobs)
set.seed(42)
cc<- completeMany("/Users/Vale/Data Analysis/specdata", 332:1)
use<-sample(332,10)
print(cc[use, "nobs"])
directory<-"/Users/Vale/Data Analysis/specdata"
completeThreshold <- function(directory, threshold) {
file_names<-list.files(directory, full.names = TRUE) #lista nomi files
specdata<- do.call(rbind,lapply(file_names,read.csv, header=TRUE))# lapply leggge tutti i files, rbind li unisce, do.call li appicica
specdata_complete <- subset(specdata,complete.cases(specdata)==TRUE)
nobs<- data.frame() # crea un vettore/matrice vuoto/a
#nobs<- c("id","nobs") # crea un vettore con contenuto (R usa la prima riga come header)
#nobs<- data.frame("id","nobs",row.names=1)
id<-1:332
# calcola i valori per ogni id
for (i in id){
currentID <- i # e.g., 1
specdataID <- subset(specdata_complete, ID==currentID) # da il subset con l ID scelto per i
lengthID <- nrow(specdataID)
# lengthID <- nrow(complete.cases(specdataID)) #e.g., 24, ma complete.cases non funziona
# lengthID <- nrow(!is.na(specdataID)) #e.g., 24, ma is.na non guarda
lengthForID <- c(currentID, lengthID) # e.g., (1,24)
nobs<- rbind(nobs, lengthForID)
}
header <- c("id","nobs")
colnames(nobs) <- header
#nobs
#subset(specdata_complete,nobs[,"nobs"]>threshold)
nobs_aboveThreshold <- nobs[,"nobs"]>threshold
specdata_aboveThreshold <- data.frame()
for (i in 1:332) {
if (subset(nobs_aboveThreshold,id==i))  # si può omettere "== true"
{
specdata_aboveThreshold <- rbind(specdata_aboveThreshold,subset(specdata_complete,ID==i))
#correlation<- rbind(correlation, cor(specdata_aboveThreshold["sulfate"],specdata_aboveThreshold["nitrate"]))
}
}
specdata_aboveThreshold
#correlation
}
corr<- function(directory, threshold){
banana<-completeThreshold(directory, threshold)
correlation <- numeric(0)
for (i in 1:332) {
bananaID<- subset(banana, ID==i)
corID<-cor(bananaID["sulfate"],bananaID["nitrate"])
if (!is.na(corID)) {
correlation<- c(correlation, corID)
}
}
correlation
}
cr<- corr("/Users/Vale/Data Analysis/specdata",0)
cr<- sort(cr)
set.seed(868)
out<- round(cr[sample(lenght(cr), 5)], 4)
?lenght
out<- round(cr[sample(length(cr), 5)], 4)
print(out)
cr<- corr("/Users/Vale/Data Analysis/specdata", 129)
cr<- sort(cr)
n<- length(cr)
seed.out(197)
set.seed(197)
out<- c(n, round(cr[sample(n,5),4]))
out<- c(n, round(cr[sample(n, 5)],4))
print(out)
cr<- corr("/Users/Vale/Data Analysis/specdata","2000")
n<- length(cr)
cr<- corr ("/Users/Vale/Data Analysis/specdata","1000")
cr<- sort(cr)
print(c(n, round(cr, 4)))
?str
x<- c(rnorm(10), runif(10), rnorm(10,1))
x
z<-runif(10)
z
?runif
clear
source('~/Data Analysis/R files for specdata/corr4.R')
source('~/Data Analysis/R files for specdata/corr4.R')
rm(list=ls())
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.charachter(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_color<- flags[, 11:17]
flag_color<- flags[,11:17]
flag_colors<- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lenght)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags&animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(dataset)
library(datasets)
data("iris")
data(iris)
?iris
rm(list=ls())
library(datasets)
data(iris)
data("iris")
summar(iris)
summary(iris)
lapply(iris, mean)
table(iris$Species)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris, 2, mean)
apply(iris,1,mean)
colMeans(iris)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 1, mean)
?apply
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
"Q"
f
Q
"Q"
f
Q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
make
?debug
undebug
